
"A la grande le puse Cuca" - Homero Simpson


-# TODO LO DISPUESTO EN ESTE PROYECTO ES DE CARACTER PROVISORIO, ABSOLUTAMENTE TODO ESTA A REVISION

# Se crearan las clases que posteriormente seran usadas para los objetos, de manera inicial solo se crearan las clases y los metodos asociados a ellas
# Posteriormente se debera llevar a cabo el proceso de encapsulamiento y la creacion de clases especificas (hijas) para los metodos.

# Las clases a crear seran las siguientes: Jugador, GM o GrandMaster, Habilidad Pasiva, Habilidad Principal, Poderes y Equipos.

# La clase Jugador tendra los sgtes atributos: nombreJugador, nombrePersonaje, raza, nivel (Este sera inicializado con el valor 1), 
# estado (Con los valores: "vivo", "muerto", "congelado") y metodos heredados de la clase habilidadPasiva, habilidadPrincipal, poderes y equipos.
# Recordemos que la clase Jugador debe devolvernos el objeto Jugador con todos los atributos que nos exigen con el fin de ingresarlos a la 
# base de datos (por definir aun).
# Debe incluir un metodo para modificar el equipamiento siempre y cuando su estado no sea muerto, esto es algo ambiguo ya que
# podemos entender como equipamiento solo el equipo pero tambien como equipo, habilidades y poderes en su conjunto (POR TRATAR) 
# Ademas debera incluir un metodo listar en que muestren TODOS los personajes creados (str) con los sgtes valores: nombrePersonaje, raza, nivel, estado.
# A definir si habra un limite de personajes a crear (aunque no lo veo necesario)


# Posteriormente se debera separar la clase raza como una clase hija de Jugador ya que muchos valores que son exigidos estan vinculados de
# manera directa a la raza (racismo?), aunque este punto esta por definirse.

# Las clases habilidadPasiva, habilidadPrincipal, poderes y equipos deben tener los sgte atributos: nombre, detalle, razaPerteneciente.

# La clase grandMaster heredara la totalidad de atributos de la clase Jugador (recordar que el GM puede ser jugador pero no viceversa)
# por temas practicos haremos que el GM tambien sea jugador, aunque no es obligatorio.
 
# La clase grandMaster ademas debera incluir metodos para las siguientes acciones:
# Crear habilidaPasiva, habilidadPrincipal
# Editar habilidadPasiva, habilidadPrincipal (solo las creados por el mismo). No podra editar la raza a la que pertenece.
# Crear poderes
# Editar poderes (solo los creados por el mismo). No podra editar la raza a la que pertenece.
# Crear equipo
# Modificar nombre equipo
# Eliminar equipo, eliminar poder, eliminar habilidad, eliminar raza(siempre y cuando no se este utilizando por algun jugador).
# Subir de nivel a cualquier jugador (incluyendose)
# Editar el estado jugador entre los atributos pre-definidos
# Crear raza (no se permite editar razas ya existentes)
# Crear estados (no se permite editar los estados base*)

# -- Metodos de listado -- 
# Listar jugadores con los atributos nombrePersonaje, raza, nivel, estado (el metodo str de toda la vida)
# Listar poderes, estos deben ir separados por raza (A TRATAR)
# Listar equipos (estos no tiene mayores requerimientos)

# -- LOGIN -- 
# Debera crearse un metodo de login que ingresando un usuario y contrase√±a el sistema identifique como jugador o grandMaster
# Queda a definir que cliente SQL usaremos (recomendaria mariaDB)
# Queda a definir si este login incluira un creador de usuario (las clases GM seran creadas con anteoridad)


# -- OTROS -- 
# *Los estados base del juego son vivo y muerto